{"version":3,"sources":["../../source/controllers/posts.js"],"names":["posts","express","Router","get","req","res","currentUser","user","Post","find","catch","err","console","log","render","next","params","id","post","findById","populate","comments","i","length","rootComment","Comment","push","populateChildren","inputComment","outputComment","children","childComment","body","author","_id","savedPost","save","User","unshift","result","redirect"],"mappings":"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","sourcesContent":["// posts.js\n\n// app\nimport express from 'express'\nconst posts = express.Router()\n\n// model\nimport Post from '../models/post.js'\nimport User from '../models/user.js'\nimport Comment from '../models/comment.js'\n\n// show all posts\nposts.get('/', async (req, res) => {\n    const currentUser = req.user;\n    const posts = await Post.find().catch(err => console.log(err))\n    res.render(`posts-index`, { posts, currentUser });\n})\n\n// show one post\nposts.get('/:id', async (req, res, next) => {\n    const currentUser = req.user;\n    if (req.params.id == `new`) {\n        next()\n    } else {\n        const post = await Post.findById(req.params.id)\n            // .populate({\n            //     path: `comments`,\n            //     populate: { path: `author` }\n            // })\n            .populate(`author`)\n            .catch(err => console.log(err))\n        // get root comments\n        const comments = []\n        for (let i = 0; i < post.comments.length; i++) {\n            const rootComment = await Comment.findById(post.comments[i])\n                .populate(`author`)\n                .catch(err => { console.log(err) })\n            comments.push(rootComment)\n        }\n        // get replies for each comment\n        for (let i = 0; i < comments.length; i++) {\n            comments[i] = await populateChildren(comments[i])\n        }\n        res.render(`posts-show`, { post, comments, currentUser });\n    }\n\n    // recursively populate the comment tree LOL\n    // poor database :( hope it can handle the load\n    async function populateChildren(inputComment) {\n        let outputComment = inputComment\n        for (let i = 0; i < inputComment.children.length; i++) {\n            let childComment = await Comment.findById(inputComment.children[i])\n                .populate(`author`)\n                .catch(err => { console.log(err) })\n            if (childComment.children.length > 0) {\n                childComment = await populateChildren(childComment)\n            }\n            outputComment.children[i] = childComment\n        }\n        return outputComment\n    }\n\n})\n\n// get new post form\nposts.get('/new', (req, res) => {\n    const currentUser = req.user;\n    res.render('posts-new', { currentUser });\n})\n\n// create new post\nposts.post('/', async (req, res) => {\n    console.log(req.user);\n    // save the post\n    const post = new Post(req.body)\n    post.author = req.user._id;\n    const savedPost = await post.save().catch(err => console.log(err))\n    // add it to the user's profile\n    const user = await User.findById(req.user._id).catch(err => console.log(err))\n    user.posts.unshift(post);\n    const result = await user.save().catch(err => console.log(err))\n    res.redirect(`/`)\n})\n\nexport default posts;\n"],"file":"posts.js"}